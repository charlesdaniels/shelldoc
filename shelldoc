#!/usr/bin/env python3

import argparse
import sys
import traceback
import os
import pathlib

shelldoc_version = "0.0.2-git"

def main():
    parser = argparse.ArgumentParser(
        description="A tool for documenting shell scripts")

    parser.add_argument("--input", "-i", required=True,
                        help="Input file to process")

    outputhandling = parser.add_mutually_exclusive_group(required=False)

    outputhandling.add_argument("--output", "-o", required=False,
                                default="/dev/stdout",
                                help="Output file for generated " +
                                "documentation, stdout by default.")
    outputhandling.add_argument("--prefix", "-p", required=False,
                                default=None,
                                help="Output file is written into this " +
                                "directory, and file is named according " +
                                "to document title with / replaced with _" +
                                ". This is specifically intended to be " +
                                "used in conjunction with --titledepth " +
                                "for generating docs for Sphix or similar.")

    titlehandling = parser.add_mutually_exclusive_group(required=False)
    titlehandling.add_argument("--doctitle", "-t", required=False,
                               default=None,
                               help="Set document title, default is input " +
                               "filename")
    titlehandling.add_argument("--titledepth", "-d", type=int, default=None,
                               help="Set the document title to it's basename" +
                               " prefixed with titledepth many parent " +
                               " directories (0 for basename only)")
    parser.add_argument('--version', '-v', action='version',
                        version="%(prog)s " + shelldoc_version)
    parser.add_argument("--notoc", "-n", action="store_true", default=False,
                        help="Do not include ..contents:: in output")
    parser.add_argument("--notitle", "-e", action="store_true", default=False,
                        help="Do not include the document title in output")
    parser.add_argument("--commentchar", "-c", default='#', help="Specify " +
                        "the character which denotes a comment in the " + 
                        "input source code. Must be a single character. " +
                        "(default: #)")
    args = parser.parse_args()

    if len(args.commentchar) != 1:
        sys.stderr.write("FATAL: comment char '{}' is not of length 1\n"
                         .format(args.commentchar))
        exit(1)

    if args.titledepth is not None:
        if args.titledepth < 0:
            sys.stderr.write("FATAL: titledepth cannot be less than 0\n")
            exit(1)

    if args.prefix is not None:
        args.prefix = os.path.realpath(args.prefix)
        if not os.path.exists(args.prefix):
            sys.stderr.write("FATAL: prefix '{}' does not exist"
                             .format(args.prefix))
            exit(1)

    try:
        doctitle = args.doctitle
        if doctitle is None:
            if args.titledepth is not None:
                # ifpath will be a type of the form:
                # ('//', 'some', 'path'), which corrosponds to '/some/path'
                ifpath = pathlib.PurePath(os.path.realpath(args.input)).parts

                # this is a title, not something we are going to path to, so
                # we use '/' on all platforms.
                doctitle = '/'.join(ifpath[-1 * (args.titledepth + 1):])
            else:
                doctitle = args.input

        if args.prefix is not None:
            args.output = "" + \
                os.path.join(args.prefix, doctitle.replace("/", "_")) + \
                ".rst"

        fin  = open(args.input, 'r')
        fout = open(args.output, 'w')

        in_scriptdoc    = False
        in_fundoc       = False
        in_whitespace   = False
        linum           = 0
        funame          = None
        sectitle        = ""

        # these dicts associate shelldoc keywords with the section titles
        # that they generate
        segments_scriptdoc = {".DESCRIPTION"  : "Description",
                              ".SYNTAX"       : "Syntax",
                              ".LICENSE"      : "License",
                              ".CHANGELOG"    : "Changelog",
                              ".AUTHOR"       : "Author"}

        segments_fundoc = {".DESCRIPTION" : "Description",
                           ".SYNTAX"      : "Syntax"}

        if not args.notitle:
            doctitle = "Documentation for ``{}``".format(doctitle)
            fout.write("*" * len(doctitle))
            fout.write("\n")
            fout.write(doctitle)
            fout.write("\n")
            fout.write("*" * len(doctitle))
            fout.write("\n")
            fout.write("\n")
        if not args.notoc:
            fout.write(".. contents::")
            fout.write("\n")
            fout.write("\n")

        for line in fin:
            linum += 1
            line = line.strip()

            # any run of blank lines int he input produces one blank line in
            # the generated documentation
            if len(line) <= 0:
                if in_whitespace is False:
                    in_whitespace = True
                    fout.write("\n")

                # no further processing required on this line
                continue

            else:
                in_whitespace = False

            if len(line) <= 0:
                sys.stderr.write("WARNING (ln {}): ".format(linum) +
                                 "'{}' contains 0 characters".format(line) +
                                 " this should never happen\n")
                continue

            if line[0] != args.commentchar:
                # don't process source code
                continue

            # strip off commentchar and the first leading space
            line = line[2:]

            if len(line) <= 0:
                # this is a comment that contains only
                fout.write("\n")
                continue

            if line[0] == '.':
                # we have hit a shelldoc keyword
                if line == ".SCRIPTDOC":
                    # handle starting a script-level document
                    if in_fundoc:
                        sys.stderr.write("FATAL (ln {}):".format(linum) +
                                         " found .SCRIPTDOC while " +
                                         "parsing function documentation\n")
                        exit(1)
                    else:
                        in_scriptdoc = True

                elif line.split()[0] == ".DOCUMENTS":
                    # handle starting a function-level document
                    if in_scriptdoc:
                        sys.stderr.write("FATAL (ln {}):".format(linum) +
                                         " found .DOCUMENTS while parsing " +
                                         " script documentation\n")
                        exit(1)
                    if len(line.split()) < 2:
                        # throw an error if the function name is not specified
                        sys.stderr.write("FATAL (ln {}): ".format(linum) +
                                         "found .DOCUMENTS with no function" +
                                         " name specified\n")
                        exit(1)
                    else:
                        in_fundoc = True
                        funame = " ".join(line.split()[1:])
                        fout.write("\n\n")
                        title = \
                            "Documentation for Function ``{}``".format(funame)
                        fout.write(title)
                        fout.write("\n")
                        fout.write('=' * len(title))
                        fout.write("\n\n")

                elif line == ".ENDOC":
                    in_scriptdoc = False
                    in_fundoc = False
                    sectitle = None

                else:
                    # decide which dict to use to select the section name
                    segdict = None
                    if in_scriptdoc:
                        segdict = segments_scriptdoc
                    elif in_fundoc:
                        segdict = segments_fundoc
                    else:
                        # We are documenting neither a function nor a script,
                        # but we have encountered a comment which starts with
                        # '# .'. We thus assume it is not inteded for us to
                        # process it and carry on
                        continue

                    if line not in segdict:
                        # handle lines beginning with . that are not valid
                        # keywords
                        sys.stderr.write("FATAL (ln {}):".format(linum) +
                                         " '{}' is not a valid keyword\n"
                                         .format(line))
                        exit(1)

                    # output the section title for this keyword
                    sectitle = segdict[line]
                    fout.write("\n" + sectitle + "\n")
                    underline_ch = "="
                    if in_fundoc:
                        underline_ch = "-"
                    fout.write(underline_ch * len(sectitle))
                    fout.write("\n\n")

                    if sectitle == "Syntax":
                        fout.write("::\n\n")

            else:
                # this is part of the documentation body

                if in_scriptdoc or in_fundoc:
                    if sectitle == "Syntax":
                        # syntax documentation is treated as preformatted
                        fout.write(" " * 4)
                    fout.write(line)
                    fout.write("\n")

        fin.close()
        fout.close()

    except Exception as e:
        sys.stderr.write("FATAL: encountered exception: {}\n".format(e))
        exc_info = sys.exc_info()
        for ln in ''.join(traceback.format_exception(*exc_info)).split('\n'):
            sys.stderr.write("TRACEBACK: {}\n".format(ln.strip()))


if __name__ == "__main__":
    main()
